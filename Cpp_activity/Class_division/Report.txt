========================================================================================================
						RESULTS
========================================================================================================
********************************************************************************************************

==============================================
	Cpp Check
==============================================
**********************************************
	......
	......
	......
	......
Checking src/main.cpp: _HAS_CXX14...
Checking src/main.cpp: _HAS_CXX17...
Checking src/main.cpp: _MSC_VER...
[include/json.hpp:11205]: (information) Skipping configuration '_MSC_VER' since the value of '_MSC_VER' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.
5/6 files checked 83% done
Checking src/sensor.cpp ...
6/6 files checked 100% done
(information) Cppcheck cannot find all the include files (use --check-config for details)

The above output was obtained for cpp check.
=====================================================================
*********************************************************************


================================================
	Valgrind
================================================
************************************************
==7971== Memcheck, a memory error detector
==7971== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==7971== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info
==7971== Command: ./sensor-demo --leak-check=full
==7971== 
.........................
.........................
.........................

==7971== 
==7971== HEAP SUMMARY:
==7971==     in use at exit: 0 bytes in 0 blocks
==7971==   total heap usage: 597,890 allocs, 597,890 frees, 36,504,760 bytes allocated
==7971== 
==7971== All heap blocks were freed -- no leaks are possible
==7971== 
==7971== For counts of detected and suppressed errors, rerun with: -v
==7971== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)


The above output is obtained for valgrind.


==================================================
	Code Coverage report can be found in results.
==================================================
**************************************************
Filename Sort by name 	Line Coverage Sort by line coverage 	Functions Sort by function coverage
accelerometer.cpp 	
100.0%
		100.0 % 	18 / 18 	100.0 % 	8 / 8
functions.cpp 	
100.0%
		100.0 % 	19 / 19 	100.0 % 	3 / 3
gps.cpp 	
100.0%
		100.0 % 	36 / 36 	100.0 % 	8 / 8
magnetometer.cpp 	
100.0%
		100.0 % 	9 / 9 	 	100.0 % 	6 / 6
main.cpp 	
100.0%
		100.0 % 	51 / 51 	100.0 % 	3 / 3
sensor.cpp 	
100.0%
		100.0 % 	15 / 15 	100.0 % 	6 / 6

=====================================================
	Doxy can be found in DOCs
=====================================================

=====================================================
	UML can be found in UMLS
=====================================================
